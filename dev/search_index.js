var documenterSearchIndex = {"docs":
[{"location":"#OutputCollectors.jl-Documentation-1","page":"OutputCollectors.jl Documentation","title":"OutputCollectors.jl Documentation","text":"","category":"section"},{"location":"#","page":"OutputCollectors.jl Documentation","title":"OutputCollectors.jl Documentation","text":"This is the reference documentation of OutputCollectors.jl","category":"page"},{"location":"#Index-1","page":"OutputCollectors.jl Documentation","title":"Index","text":"","category":"section"},{"location":"#","page":"OutputCollectors.jl Documentation","title":"OutputCollectors.jl Documentation","text":"","category":"page"},{"location":"#Types-1","page":"OutputCollectors.jl Documentation","title":"Types","text":"","category":"section"},{"location":"#","page":"OutputCollectors.jl Documentation","title":"OutputCollectors.jl Documentation","text":"Modules = [OutputCollectors]\nOrder = [:type]","category":"page"},{"location":"#OutputCollectors.OutputCollector","page":"OutputCollectors.jl Documentation","title":"OutputCollectors.OutputCollector","text":"OutputCollector\n\nA run() wrapper class that captures subprocess stdout and stderr streams independently, resynthesizing and colorizing the streams appropriately.\n\n\n\n\n\n","category":"type"},{"location":"#OutputCollectors.OutputCollector-Tuple{Base.AbstractCmd}","page":"OutputCollectors.jl Documentation","title":"OutputCollectors.OutputCollector","text":"OutputCollector(cmd::AbstractCmd; verbose::Bool = false)\n\nRun cmd, and collect the output such that stdout and stderr are captured independently, but with the time of each line recorded such that they can be stored/analyzed independently, but replayed synchronously.\n\n\n\n\n\n","category":"method"},{"location":"#OutputCollectors.LineStream-Tuple{Pipe,Base.GenericCondition{Base.AlwaysLockedST}}","page":"OutputCollectors.jl Documentation","title":"OutputCollectors.LineStream","text":"LineStream(pipe::Pipe)\n\nGiven a Pipe that has been initialized by spawn(), create an async Task to read in lines as they come in and annotate the time the line was captured for later replay/merging with other simultaneously captured streams.\n\n\n\n\n\n","category":"method"},{"location":"#Functions-1","page":"OutputCollectors.jl Documentation","title":"Functions","text":"","category":"section"},{"location":"#","page":"OutputCollectors.jl Documentation","title":"OutputCollectors.jl Documentation","text":"Modules = [OutputCollectors]\nOrder = [:function]","category":"page"},{"location":"#Base.merge-Tuple{OutputCollector}","page":"OutputCollectors.jl Documentation","title":"Base.merge","text":"merge(collector::OutputCollector; colored::Bool = false)\n\nMerge the stdout and stderr streams of the OutputCollector on a per-line basis, returning a single string containing all collected lines, interleaved by capture time.  If colored is set to true, embeds terminal color codes to print stderr in red.\n\n\n\n\n\n","category":"method"},{"location":"#OutputCollectors.collect_stderr-Tuple{OutputCollector}","page":"OutputCollectors.jl Documentation","title":"OutputCollectors.collect_stderr","text":"collect_stderr(collector::OutputCollector)\n\nReturns all stderr lines collected by this collector so far.\n\n\n\n\n\n","category":"method"},{"location":"#OutputCollectors.collect_stdout-Tuple{OutputCollector}","page":"OutputCollectors.jl Documentation","title":"OutputCollectors.collect_stdout","text":"collect_stdout(collector::OutputCollector)\n\nReturns all stdout lines collected by this collector so far.\n\n\n\n\n\n","category":"method"},{"location":"#OutputCollectors.tail-Tuple{OutputCollector}","page":"OutputCollectors.jl Documentation","title":"OutputCollectors.tail","text":"tail(collector::OutputCollector; len::Int = 100, colored::Bool = false)\n\nWrite out the last len lines, optionally writing colored lines.\n\n\n\n\n\n","category":"method"},{"location":"#OutputCollectors.tee-Tuple{OutputCollector}","page":"OutputCollectors.jl Documentation","title":"OutputCollectors.tee","text":"tee(c::OutputCollector; colored::Bool = false, stream::IO = stdout)\n\nSpawn a background task to incrementally output lines from collector to the standard output, optionally colored.\n\n\n\n\n\n","category":"method"},{"location":"#Base.wait-Tuple{OutputCollector}","page":"OutputCollectors.jl Documentation","title":"Base.wait","text":"wait(collector::OutputCollector)\n\nWait for the command and all line streams within an OutputCollector to finish their respective tasks and be ready for full merging.  Return the success of the underlying process.  Prints out the last 10 lines of the process if it does not complete successfully unless the OutputCollector was created as verbose.\n\n\n\n\n\n","category":"method"},{"location":"#OutputCollectors.alive-Tuple{OutputCollectors.LineStream}","page":"OutputCollectors.jl Documentation","title":"OutputCollectors.alive","text":"alive(s::LineStream)\n\nReturns true if the task owned by this LineStream is still processing output from an underlying Pipe.\n\n\n\n\n\n","category":"method"},{"location":"#OutputCollectors.readuntil_many-Tuple{IO,Any}","page":"OutputCollectors.jl Documentation","title":"OutputCollectors.readuntil_many","text":"readuntil_many(s::IO, delims)\n\nGiven a collection of delimiter characters, read from s until one of those delimiters is reached, or we reach the end of s.\n\n\n\n\n\n","category":"method"}]
}
